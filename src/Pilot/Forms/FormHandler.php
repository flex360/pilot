<?php

namespace Flex360\Pilot\Pilot\Forms;

use Illuminate\Support\Facades\Mail;
use Flex360\Pilot\Mail\FormSubmitted;
use Flex360\Pilot\Pilot\Helpers\Recaptcha;

class FormHandler
{
    private $data = [];

    public function __construct($data = [])
    {
        $this->data = $data;
    }

    public function getUserData()
    {
        return array_filter($this->data, function ($value, $key) {
            return substr($key, 0, 1) != '_';
        }, ARRAY_FILTER_USE_BOTH);
    }

    public function valid()
    {
        // validate recaptcha if available
        if (isset($this->data['g-recaptcha-response'])) {
            $validRecaptcha = Recaptcha::isValid($this->data['g-recaptcha-response']);

            if (!$validRecaptcha) {
                session(['error' => 'There was a problem with you submission.']);
            }

            unset($this->data['g-recaptcha-response']);

            return $validRecaptcha;
        }

        return true;
    }

    public function send()
    {
        Mail::to($this->getToEmail())->send(new FormSubmitted($this));

        return redirect($this->getAfterSubmissionUrl());
    }

    public function getToEmail()
    {
        try {
            $email = $this->data['_to'];
        } catch (\Exception $e) {
            die('Include a hidden field named <strong>_to</strong> with a value of the encrypted email address you would like to receive submission.');
        }

        try {
            $email = decrypt($email);
        } catch (\Exception $e) {
            die('Email field (_to) must be encrypted.');
        }

        return $email;
    }

    public function getSubject()
    {
        try {
            return $this->data['_subject'];
        } catch (\Exception $e) {
            die('Include a hidden field named <strong>_subject</strong> with a value of the subject used on the email generated by the submission.');
        }
    }

    public function getAfterSubmissionUrl()
    {
        try {
            return $this->data['_after'];
        } catch (\Exception $e) {
            die('Include a hidden field named <strong>_after</strong> with a value of the url you would like to redirect users to after submission.');
        }
    }

    public function getErrorRedirect()
    {
        try {
            return redirect($this->data['_error']);
        } catch (\Exception $e) {
            die('Include a hidden field named <strong>_error</strong> with a value of the url you would like to redirect users to if there is an error.');
        }
    }

    public function toHtmlTable()
    {
        ob_start(); ?>

        <table style="border: 1px solid #ccc; border-bottom: none;" cellpadding="0" cellspacing="0">

            <?php foreach ($this->getUserData() as $key => $value): ?>

            <tr>

                <td style="border-right: 1px solid #ccc; border-bottom: 1px solid #ccc; padding: 7px 10px;"><?= ucwords(str_replace('_', ' ', $key)) ?></td>
                <td style="border-bottom: 1px solid #ccc; padding: 7px 10px;"><?= $value ?></td>

            </tr>

            <?php endforeach; ?>

        </table>

        <?php
        $html = ob_get_contents();
        ob_end_clean();

        return $html;
    }

    public static function open($options = [])
    {
        ob_start(); ?>

        <form action="/form-handler" method="post">

            <?php echo csrf_field(); ?>

            <input type="hidden" name="_to" value="<?php echo e(encrypt($options['to'])); ?>">
            <input type="hidden" name="_subject" value="<?php echo e($options['subject']); ?>">
            <input type="hidden" name="_after" value="<?php echo e($options['after']); ?>">
            <input type="hidden" name="_error" value="<?php echo e($options['error']); ?>">

        <?php
        $html = ob_get_contents();
        ob_end_clean();

        return $html;
    }
}
